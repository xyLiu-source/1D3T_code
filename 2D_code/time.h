#include <iostream>
#include <cmath>
#include<Eigen/Sparse>
#include<Eigen/IterativeLinearSolvers>

// time marching
void IMEX3_f(double** uf_0, double** uf_1, double** uf_2, double** uf_3, double** uf_4, double** uf_5, double** u_0, double** u_1, double** u_2, double** u_3, double** u_4, double** u_5, double** ufTP_0, double** ufTP_1, double** ufTP_2, double** ufTP_3, double** ufTP_4, double** ufTP_5, double tau);
void IMEX3_s(double** us_0, double** us_1, double** us_2, double** us_3, double** us_4, double** us_5, double** u_0, double** u_1, double** u_2, double** u_3, double** u_4, double** u_5, double** uf_0, double** uf_1, double** uf_2, double** uf_3, double** uf_4, double** uf_5, double** ufTP_0, double** ufTP_1, double** ufTP_2, double** ufTP_3, double** ufTP_4, double** ufTP_5, double** usTP_0, double** usTP_1, double** usTP_2, double** usTP_3, double** usTP_4, double** usTP_5, double tau, double a1);
void IMEX3_t(double** ut_0, double** ut_1, double** ut_2, double** ut_3, double** ut_4, double** ut_5, double** u_0, double** u_1, double** u_2, double** u_3, double** u_4, double** u_5, double** uf_0, double** uf_1, double** uf_2, double** uf_3, double** uf_4, double** uf_5, double** us_0, double** us_1, double** us_2, double** us_3, double** us_4, double** us_5, double** usTP_0, double** usTP_1, double** usTP_2, double** usTP_3, double** usTP_4, double** usTP_5, double** utTP_0, double** utTP_1, double** utTP_2, double** utTP_3, double** utTP_4, double** utTP_5, double tau, double a2);
void IMEX3_l(double** ul_0, double** ul_1, double** ul_2, double** ul_3, double** ul_4, double** ul_5, double** u_0, double** u_1, double** u_2, double** u_3, double** u_4, double** u_5, double** uf_0, double** uf_1, double** uf_2, double** uf_3, double** uf_4, double** uf_5, double** us_0, double** us_1, double** us_2, double** us_3, double** us_4, double** us_5, double** ut_0, double** ut_1, double** ut_2, double** ut_3, double** ut_4, double** ut_5, double** usTP_0, double** usTP_1, double** usTP_2, double** usTP_3, double** usTP_4, double** usTP_5, double** utTP_0, double** utTP_1, double** utTP_2, double** utTP_3, double** utTP_4, double** utTP_5, double** ulTP_0, double** ulTP_1, double** ulTP_2, double** ulTP_3, double** ulTP_4, double** ulTP_5, double tau, double b1, double b2);

void IMEX3_FS(Eigen::VectorXd& Uf_vec, double** Uf_0, double** Uf_1, double** Uf_2, double** Uf_3, double** Uf_4, double** Uf_5, Eigen::VectorXd& U_vec, Eigen::VectorXd& N_f, Eigen::SparseMatrix<double> M, int m_rows, int M_rows, double** UTP_0, double** UTP_1, double** UTP_2, double** UTP_3, double** UTP_4, double** UTP_5, double** U_0, double** U_1, double** U_2, double** U_3, double** U_4, double** U_5, double tau, double a0, Eigen::SparseLU<Eigen::SparseMatrix<double>>& solver);
void IMEX3_SS(Eigen::VectorXd& Us_vec, double** Us_0, double** Us_1, double** Us_2, double** Us_3, double** Us_4, double** Us_5, Eigen::VectorXd& N_s, Eigen::SparseMatrix<double> M, int m_rows, int M_rows, double** UTP_0, double** UTP_1, double** UTP_2, double** UTP_3, double** UTP_4, double** UTP_5, Eigen::VectorXd U_vec, Eigen::VectorXd Uf_vec, Eigen::VectorXd N_f, double tau, double a0, double a1, Eigen::SparseLU<Eigen::SparseMatrix<double>>& solver);
void IMEX3_TS(Eigen::VectorXd& Ut_vec, double** Ut_0, double** Ut_1, double** Ut_2, double** Ut_3, double** Ut_4, double** Ut_5, Eigen::VectorXd& N_t, Eigen::SparseMatrix<double> M, int m_rows, int M_rows, double** UTP_0, double** UTP_1, double** UTP_2, double** UTP_3, double** UTP_4, double** UTP_5, Eigen::VectorXd U_vec, Eigen::VectorXd Uf_vec, Eigen::VectorXd Us_vec, Eigen::VectorXd N_s, double tau, double a0, double b1, double b2, double a2, Eigen::SparseLU<Eigen::SparseMatrix<double>>& solver);
void piece_Linear_coef_matrix(Eigen::SparseMatrix<double>& mat, int M_rows, int M_cols, int rows, int cols, double alpha_0, double beta_0, double h_x, double h_y, double m_index, double coff);


// time step
double comput_rho_min(double** rho); double compute_dj(double rho_min);
void compute_st(double** s_j, double** rho_0, double** m1_0, double** m2_0, double** Ee_0); double compute_sj_max(double** s_j);
